abf local build script

usage:
$ abb <command> [<project name>]
$ abb store <file name>

supported commands:
clone
build, builda, buildb, buildp... (see below)
restore

<project name> can be omitted for command "build*" if we are in the project dir

conffiles:
first script looking for ~/.abbrc
if it not exists, then looking for .abbrc in curdir

examples:
$ abb clone mandriva-release
this is equivalent to
1. "git clone https://abf.rosalinux.ru/import/mandriva-release.git"
2. "cd mandriva-release"
3. "git checkout -t origin/rosa2012lts"
4. "cd .."
all parts of arguments can be overriden via a conffile
default settings:
proto=https
server=abf.rosalinux.ru
owner=import
branch=rosa2012lts
remote=origin
auth=
abfyml=.abf.yml

you can also override any option in command-line
in form <option>=<value> like there:
$ abb branch=import_cooker clone mandriva-release
or
$ abb clone branch=import_cooker mandriva-release
or
$ abb clone mandriva-release branch=import_cooker


$ abb build mandriva-release
in this case script tries to determine whether project already cloned
if not - he clones the project
then he tries to build project

you can add suffix to command "build":
builda - like -ba option to rpmbuild
buildb - like -bb option to rpmbuild (by default)
buildp - like -bp option to rpmbuild
and so forth

command "store":
"store" tries to upload file to abf storage: http://file-store.rosalinux.ru.
now this service requires authentication to upload files.
authentication is the same as on the https://abf.rosalinux.ru.
"store" requires one argument - name of file to store.
"store" must be run in the project directory.

command "restore":
"restore" - opposite to "store".
if "restore" is running in the project directory, it does not require any
arguments.
otherwise requires one argument - the name of the project (or rather the
project directory), similar to "build" or "clone".
